--- nginx/src/mail/ngx_mail_pop3_module.c	2023-03-07 16:26:44.727853600 +0530
+++ nginx/src/mail/ngx_mail_pop3_module.c	2023-09-14 18:47:12.652834400 +0530
@@ -16,6 +16,7 @@
 static char *ngx_mail_pop3_merge_srv_conf(ngx_conf_t *cf, void *parent,
     void *child);
 
+static ngx_str_t default_pop3_greeting = ngx_string("+OK POP3 ready");
 
 static ngx_str_t  ngx_mail_pop3_default_capabilities[] = {
     ngx_string("TOP"),
@@ -28,7 +29,9 @@
 static ngx_conf_bitmask_t  ngx_mail_pop3_auth_methods[] = {
     { ngx_string("plain"), NGX_MAIL_AUTH_PLAIN_ENABLED },
     { ngx_string("apop"), NGX_MAIL_AUTH_APOP_ENABLED },
+    { ngx_string("login"), NGX_MAIL_AUTH_LOGIN_ENABLED },
     { ngx_string("cram-md5"), NGX_MAIL_AUTH_CRAM_MD5_ENABLED },
+    { ngx_string("gssapi"), NGX_MAIL_AUTH_GSSAPI_ENABLED },
     { ngx_string("external"), NGX_MAIL_AUTH_EXTERNAL_ENABLED },
     { ngx_null_string, 0 }
 };
@@ -44,6 +47,21 @@
 };
 
 
+static ngx_str_t  ngx_mail_pop3_auth_plain_capability =
+    ngx_string("+OK methods supported:" CRLF
+               "LOGIN" CRLF
+               "PLAIN" CRLF
+               "." CRLF);
+
+
+static ngx_str_t  ngx_mail_pop3_auth_cram_md5_capability =
+    ngx_string("+OK methods supported:" CRLF
+               "LOGIN" CRLF
+               "PLAIN" CRLF
+               "CRAM-MD5" CRLF
+               "." CRLF);
+
+
 static ngx_mail_protocol_t  ngx_mail_pop3_protocol = {
     ngx_string("pop3"),
     ngx_string("\x04pop3"),
@@ -57,12 +75,20 @@
 
     ngx_string("-ERR internal server error" CRLF),
     ngx_string("-ERR SSL certificate error" CRLF),
-    ngx_string("-ERR No required SSL certificate" CRLF)
+    ngx_string("-ERR No required SSL certificate" CRLF),
+    ngx_string("")
 };
 
 
 static ngx_command_t  ngx_mail_pop3_commands[] = {
 
+    { ngx_string("pop3_client_buffer"),
+      NGX_MAIL_MAIN_CONF|NGX_MAIL_SRV_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_size_slot,
+      NGX_MAIL_SRV_CONF_OFFSET,
+      offsetof(ngx_mail_pop3_srv_conf_t, client_buffer_size),
+      NULL },
+
     { ngx_string("pop3_capabilities"),
       NGX_MAIL_MAIN_CONF|NGX_MAIL_SRV_CONF|NGX_CONF_1MORE,
       ngx_mail_capabilities,
@@ -77,6 +103,13 @@
       offsetof(ngx_mail_pop3_srv_conf_t, auth_methods),
       &ngx_mail_pop3_auth_methods },
 
+    { ngx_string("pop3_greeting"),
+      NGX_MAIL_MAIN_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_MAIL_SRV_CONF_OFFSET,
+      offsetof(ngx_mail_pop3_srv_conf_t, greeting),
+      NULL },
+
       ngx_null_command
 };
 
@@ -118,6 +151,8 @@
         return NULL;
     }
 
+    pscf->client_buffer_size = NGX_CONF_UNSET_SIZE;
+
     if (ngx_array_init(&pscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
         != NGX_OK)
     {
@@ -134,19 +169,30 @@
     ngx_mail_pop3_srv_conf_t *prev = parent;
     ngx_mail_pop3_srv_conf_t *conf = child;
 
-    u_char      *p;
-    size_t       size, stls_only_size;
+    u_char      *p, *p1, *p2, *p3;
+    size_t       s1, s2, s3;
     ngx_str_t   *c, *d;
-    ngx_uint_t   i, m;
+    ngx_uint_t   i;
+
+    ngx_conf_merge_size_value(conf->client_buffer_size,
+                              prev->client_buffer_size,
+                              (size_t) 4*ngx_pagesize);
 
     ngx_conf_merge_bitmask_value(conf->auth_methods,
                                  prev->auth_methods,
-                                 (NGX_CONF_BITMASK_SET
-                                  |NGX_MAIL_AUTH_PLAIN_ENABLED));
+                                 NGX_CONF_BITMASK_SET);
 
+    /*
     if (conf->auth_methods & NGX_MAIL_AUTH_PLAIN_ENABLED) {
         conf->auth_methods |= NGX_MAIL_AUTH_LOGIN_ENABLED;
     }
+    */
+
+    ngx_conf_merge_str_value(conf->greeting, prev->greeting,"");
+
+    if (conf->greeting.len == 0) {
+        conf->greeting = default_pop3_greeting;
+    }
 
     if (conf->capabilities.nelts == 0) {
         conf->capabilities = prev->capabilities;
@@ -164,160 +210,124 @@
         }
     }
 
-    size = sizeof("+OK Capability list follows" CRLF) - 1
-           + sizeof("." CRLF) - 1;
-
-    stls_only_size = size + sizeof("STLS" CRLF) - 1;
+    s1 = sizeof("+OK Capability list follows" CRLF) - 1
+         + sizeof("." CRLF)-1;
+    if (conf->auth_methods &
+        (NGX_MAIL_AUTH_PLAIN_ENABLED | NGX_MAIL_AUTH_GSSAPI_ENABLED))
+         s1 += sizeof("SASL" CRLF)-1;
+    s2 = s1;
+    s3 = s1;
 
     c = conf->capabilities.elts;
-    for (i = 0; i < conf->capabilities.nelts; i++) {
-        size += c[i].len + sizeof(CRLF) - 1;
-
-        if (ngx_strcasecmp(c[i].data, (u_char *) "USER") == 0) {
-            continue;
+    for (i=0; i<conf->capabilities.nelts; ++i)
+    {
+        s1 += c[i].len + sizeof (CRLF)-1;
+        s2 += c[i].len + sizeof (CRLF)-1;
+        if (ngx_strcasecmp(c[i].data, (u_char *) "USER") != 0) {
+            s3 += c[i].len + sizeof (CRLF)-1;
         }
-
-        stls_only_size += c[i].len + sizeof(CRLF) - 1;
     }
 
-    size += sizeof("SASL") - 1 + sizeof(CRLF) - 1;
+    if (conf->auth_methods & NGX_MAIL_AUTH_PLAIN_ENABLED) {
+        s1 += sizeof(" PLAIN") - 1;
+        s2 += sizeof(" PLAIN") - 1;
+        s3 += sizeof(" PLAIN") - 1;
+    }
+    if (conf->auth_methods & NGX_MAIL_AUTH_GSSAPI_ENABLED) {
+        s1 += sizeof(" GSSAPI") - 1;
+        s2 += sizeof(" GSSAPI") - 1;
+        s3 += sizeof(" GSSAPI") - 1;
+    }
 
-    for (m = NGX_MAIL_AUTH_PLAIN_ENABLED, i = 0;
-         m <= NGX_MAIL_AUTH_EXTERNAL_ENABLED;
-         m <<= 1, i++)
-    {
-        if (ngx_mail_pop3_auth_methods_names[i].len == 0) {
-            continue;
-        }
+    s2 += sizeof("STLS" CRLF) - 1;
+    s3 += sizeof("STLS" CRLF) - 1;
 
-        if (m & conf->auth_methods) {
-            size += 1 + ngx_mail_pop3_auth_methods_names[i].len;
-        }
+    p1 = ngx_pnalloc(cf->pool,s1);
+    if (p1 == NULL) {
+        return NGX_CONF_ERROR;
     }
-
-    p = ngx_pnalloc(cf->pool, size);
-    if (p == NULL) {
+    p2 = ngx_palloc(cf->pool,s2);
+    if (p2 == NULL) {
         return NGX_CONF_ERROR;
     }
-
-    conf->capability.len = size;
-    conf->capability.data = p;
-
-    p = ngx_cpymem(p, "+OK Capability list follows" CRLF,
-                   sizeof("+OK Capability list follows" CRLF) - 1);
-
-    for (i = 0; i < conf->capabilities.nelts; i++) {
-        p = ngx_cpymem(p, c[i].data, c[i].len);
-        *p++ = CR; *p++ = LF;
+    p3 = ngx_pnalloc(cf->pool,s3);
+    if (p3 == NULL) {
+        return NGX_CONF_ERROR;
     }
 
-    p = ngx_cpymem(p, "SASL", sizeof("SASL") - 1);
+    conf->capability.len = s1;
+    conf->capability.data = p1;
+    conf->starttls_capability.len = s2;
+    conf->starttls_capability.data = p2;
+    conf->starttls_only_capability.len = s3;
+    conf->starttls_only_capability.data = p3;
+
+    p1 = ngx_cpymem(p1, "+OK Capability list follows" CRLF,
+                        sizeof("+OK Capability list follows" CRLF) - 1);
+    p2 = ngx_cpymem(p2, "+OK Capability list follows" CRLF,
+                        sizeof("+OK Capability list follows" CRLF) - 1);
+    p3 = ngx_cpymem(p3, "+OK Capability list follows" CRLF,
+                        sizeof("+OK Capability list follows" CRLF) - 1);
 
-    for (m = NGX_MAIL_AUTH_PLAIN_ENABLED, i = 0;
-         m <= NGX_MAIL_AUTH_EXTERNAL_ENABLED;
-         m <<= 1, i++)
+    c = conf->capabilities.elts;
+    for (i = 0; i < conf->capabilities.nelts; ++i)
     {
-        if (ngx_mail_pop3_auth_methods_names[i].len == 0) {
-            continue;
-        }
-
-        if (m & conf->auth_methods) {
-            *p++ = ' ';
-            p = ngx_cpymem(p, ngx_mail_pop3_auth_methods_names[i].data,
-                           ngx_mail_pop3_auth_methods_names[i].len);
+        p1 = ngx_cpymem(p1,c[i].data,c[i].len);
+        p2 = ngx_cpymem(p2,c[i].data,c[i].len);
+        *p1++ = CR; *p1++ = LF;
+        *p2++ = CR; *p2++ = LF;
+        if (ngx_strcasecmp(c[i].data, (u_char *) "USER") != 0) {
+            p3 = ngx_cpymem(p3,c[i].data,c[i].len);
+            *p3++ = CR; *p3++ = LF;
         }
     }
 
-    *p++ = CR; *p++ = LF;
-
-    *p++ = '.'; *p++ = CR; *p = LF;
-
-
-    size += sizeof("STLS" CRLF) - 1;
-
-    p = ngx_pnalloc(cf->pool, size);
-    if (p == NULL) {
-        return NGX_CONF_ERROR;
-    }
-
-    conf->starttls_capability.len = size;
-    conf->starttls_capability.data = p;
-
-    p = ngx_cpymem(p, conf->capability.data,
-                   conf->capability.len - (sizeof("." CRLF) - 1));
+    if (conf->auth_methods &
+        (NGX_MAIL_AUTH_PLAIN_ENABLED | NGX_MAIL_AUTH_GSSAPI_ENABLED)) {
+        p1 = ngx_cpymem(p1,"SASL",sizeof("SASL") - 1);
+        p2 = ngx_cpymem(p2,"SASL",sizeof("SASL") - 1);
+        p3 = ngx_cpymem(p3,"SASL",sizeof("SASL") - 1);
 
-    p = ngx_cpymem(p, "STLS" CRLF, sizeof("STLS" CRLF) - 1);
-    *p++ = '.'; *p++ = CR; *p = LF;
-
-
-    size = sizeof("+OK methods supported:" CRLF) - 1
-           + sizeof("." CRLF) - 1;
-
-    for (m = NGX_MAIL_AUTH_PLAIN_ENABLED, i = 0;
-         m <= NGX_MAIL_AUTH_EXTERNAL_ENABLED;
-         m <<= 1, i++)
-    {
-        if (ngx_mail_pop3_auth_methods_names[i].len == 0) {
-            continue;
+        if (conf->auth_methods & NGX_MAIL_AUTH_PLAIN_ENABLED) {
+            p1 = ngx_cpymem(p1," PLAIN",sizeof(" PLAIN") - 1);
+            p2 = ngx_cpymem(p2," PLAIN",sizeof(" PLAIN") - 1);
+            p3 = ngx_cpymem(p3," PLAIN",sizeof(" PLAIN") - 1);
         }
-
-        if (m & conf->auth_methods) {
-            size += ngx_mail_pop3_auth_methods_names[i].len
-                    + sizeof(CRLF) - 1;
+        if (conf->auth_methods & NGX_MAIL_AUTH_GSSAPI_ENABLED) {
+            p1 = ngx_cpymem(p1," GSSAPI",sizeof(" GSSAPI") - 1);
+            p2 = ngx_cpymem(p2," GSSAPI",sizeof(" GSSAPI") - 1);
+            p3 = ngx_cpymem(p3," GSSAPI",sizeof(" GSSAPI") - 1);
         }
-    }
 
-    p = ngx_pnalloc(cf->pool, size);
-    if (p == NULL) {
-        return NGX_CONF_ERROR;
+        *p1++ = CR; *p1++ = LF;
+        *p2++ = CR; *p2++ = LF;
+        *p3++ = CR; *p3++ = LF;
     }
 
-    conf->auth_capability.data = p;
-    conf->auth_capability.len = size;
+    p2 = ngx_cpymem(p2,"STLS" CRLF, sizeof("STLS" CRLF)-1);
+    p3 = ngx_cpymem(p3,"STLS" CRLF, sizeof("STLS" CRLF)-1);
 
-    p = ngx_cpymem(p, "+OK methods supported:" CRLF,
-                   sizeof("+OK methods supported:" CRLF) - 1);
+    *p1++ = '.'; *p1++ = CR; *p1++ = LF;
+    *p2++ = '.'; *p2++ = CR; *p2++ = LF;
+    *p3++ = '.'; *p3++ = CR; *p3++ = LF;
 
-    for (m = NGX_MAIL_AUTH_PLAIN_ENABLED, i = 0;
-         m <= NGX_MAIL_AUTH_EXTERNAL_ENABLED;
-         m <<= 1, i++)
-    {
-        if (ngx_mail_pop3_auth_methods_names[i].len == 0) {
-            continue;
-        }
+    /* not required */
+    if (conf->auth_methods & NGX_MAIL_AUTH_CRAM_MD5_ENABLED) {
+        conf->auth_capability = ngx_mail_pop3_auth_cram_md5_capability;
 
-        if (m & conf->auth_methods) {
-            p = ngx_cpymem(p, ngx_mail_pop3_auth_methods_names[i].data,
-                           ngx_mail_pop3_auth_methods_names[i].len);
-            *p++ = CR; *p++ = LF;
-        }
+    } else {
+        conf->auth_capability = ngx_mail_pop3_auth_plain_capability;
     }
 
-    *p++ = '.'; *p++ = CR; *p = LF;
-
-
-    p = ngx_pnalloc(cf->pool, stls_only_size);
+    p = ngx_pnalloc(cf->pool,conf->greeting.len + 2);
     if (p == NULL) {
         return NGX_CONF_ERROR;
     }
 
-    conf->starttls_only_capability.len = stls_only_size;
-    conf->starttls_only_capability.data = p;
-
-    p = ngx_cpymem(p, "+OK Capability list follows" CRLF,
-                   sizeof("+OK Capability list follows" CRLF) - 1);
-
-    for (i = 0; i < conf->capabilities.nelts; i++) {
-        if (ngx_strcasecmp(c[i].data, (u_char *) "USER") == 0) {
-            continue;
-        }
-
-        p = ngx_cpymem(p, c[i].data, c[i].len);
-        *p++ = CR; *p++ = LF;
-    }
-
-    p = ngx_cpymem(p, "STLS" CRLF, sizeof("STLS" CRLF) - 1);
-    *p++ = '.'; *p++ = CR; *p = LF;
+    ngx_memcpy(p, conf->greeting.data, conf->greeting.len);
+    ngx_memcpy(p + conf->greeting.len, CRLF, sizeof(CRLF) - 1);
+    conf->greeting.data = p;
+    conf->greeting.len += 2;
 
     return NGX_CONF_OK;
 }
