--- nginx/src/mail/ngx_mail_parse.c	2023-03-07 16:26:44.722976000 +0530
+++ nginx/src/mail/ngx_mail_parse.c	2023-09-18 19:18:53.672156800 +0530
@@ -14,21 +14,104 @@
 #include <ngx_mail_smtp_module.h>
 
 
+static ngx_int_t ngx_mail_imap_parse_id_params(ngx_mail_session_t *s, u_char *p);
+
+typedef enum {
+        swi_start = 0,
+        swi_tag,
+        swi_invalid,
+        swi_spaces_before_command,
+        swi_command,
+        swi_spaces_before_argument,
+        swi_argument,
+        swi_backslash,
+        swi_literal,
+        swi_no_sync_literal_argument,
+        swi_start_literal_argument,
+        swi_literal_argument,
+        swi_end_literal_argument,
+        swi_almost_done,
+        swi_begin_idparams = 15,
+        swi_end_idparams,
+        swi_done_idparams,
+        swi_almost_done_idparams,
+        swi_begin_idfield,
+        swi_id_n,
+        swi_id_ni,
+        swi_id_nil,
+        swi_idfield,
+        swi_idfield_len,
+        swi_idfield_len_plus,
+        swi_begin_idfield_l,
+        swi_idfield_l,
+        swi_SP_before_idvalue,
+        swi_X_before_idfield,
+        swi_begin_idvalue,
+        swi_idvalue,
+        swi_idvalue_n,
+        swi_idvalue_ni,
+        swi_idvalue_nil,
+        swi_idvalue_len,
+        swi_idvalue_len_plus,
+        swi_begin_idvalue_l,
+        swi_idvalue_l,
+} ngx_imap_parse_state_e;
+
+typedef enum {
+    swp_start = 0,
+    swp_command,
+    swp_invalid,
+    swp_spaces_before_argument,
+    swp_argument,
+    swp_almost_done
+} ngx_pop3_parse_state_e;
+
+typedef enum {
+    sws_start = 0,
+    sws_command,
+    sws_spaces_before_argument,
+    sws_argument,
+    sws_almost_done,
+    sws_invalid
+} ngx_smtp_parse_state_e;
+
+inline void ngx_mail_set_imap_parse_state_start(ngx_mail_session_t * s) {
+    s->state = swi_start;
+}
+
+inline void ngx_mail_set_pop3_parse_state_start(ngx_mail_session_t * s) {
+    s->state = swp_start;
+}
+
+inline void ngx_mail_set_smtp_parse_state_start(ngx_mail_session_t * s) {
+    s->state = sws_start;
+}
+
+inline void ngx_mail_set_imap_parse_state_argument(ngx_mail_session_t * s) {
+    s->state = swi_argument;
+}
+
+inline void ngx_mail_set_pop3_parse_state_argument(ngx_mail_session_t * s) {
+    s->state = swp_argument;
+}
+
+inline void ngx_mail_set_smtp_parse_state_argument(ngx_mail_session_t * s) {
+    s->state = sws_argument;
+}
+
+inline void ngx_mail_reset_parse_buffer(ngx_mail_session_t * s) {
+    s->buffer->pos = s->buffer->start;
+    s->buffer->last = s->buffer->start;
+}
+
+
 ngx_int_t
 ngx_mail_pop3_parse_command(ngx_mail_session_t *s)
 {
     u_char      ch, *p, *c, c0, c1, c2, c3;
     ngx_str_t  *arg;
-    enum {
-        sw_start = 0,
-        sw_command,
-        sw_invalid,
-        sw_spaces_before_argument,
-        sw_argument,
-        sw_almost_done
-    } state;
 
-    state = s->state;
+    ngx_pop3_parse_state_e state = s->state;
 
     for (p = s->buffer->pos; p < s->buffer->last; p++) {
         ch = *p;
@@ -36,13 +119,13 @@
         switch (state) {
 
         /* POP3 command */
-        case sw_start:
+        case swp_start:
             s->cmd_start = p;
-            state = sw_command;
+            state = swp_command;
 
             /* fall through */
 
-        case sw_command:
+        case swp_command:
             if (ch == ' ' || ch == CR || ch == LF) {
                 c = s->cmd_start;
 
@@ -98,10 +181,10 @@
 
                 switch (ch) {
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    state = swp_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = swp_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -115,21 +198,21 @@
 
             break;
 
-        case sw_invalid:
+        case swp_invalid:
             goto invalid;
 
-        case sw_spaces_before_argument:
+        case swp_spaces_before_argument:
             switch (ch) {
             case ' ':
                 break;
             case CR:
-                state = sw_almost_done;
+                state = swp_almost_done;
                 break;
             case LF:
                 goto done;
             default:
                 if (s->args.nelts <= 2) {
-                    state = sw_argument;
+                    state = swp_argument;
                     s->arg_start = p;
                     break;
                 }
@@ -137,7 +220,7 @@
             }
             break;
 
-        case sw_argument:
+        case swp_argument:
             switch (ch) {
 
             case ' ':
@@ -167,10 +250,10 @@
 
                 switch (ch) {
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    state = swp_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = swp_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -182,7 +265,7 @@
             }
             break;
 
-        case sw_almost_done:
+        case swp_almost_done:
             switch (ch) {
             case LF:
                 goto done;
@@ -200,22 +283,20 @@
 done:
 
     s->buffer->pos = p + 1;
-    s->state = (s->command != NGX_POP3_AUTH) ? sw_start : sw_argument;
-
     return NGX_OK;
 
 invalid:
 
-    s->state = sw_invalid;
+    s->state = swp_invalid;
 
     /* skip invalid command till LF */
 
     for ( /* void */ ; p < s->buffer->last; p++) {
         if (*p == LF) {
-            s->state = sw_start;
+            s->state = swp_start;
             s->buffer->pos = p + 1;
-            return NGX_MAIL_PARSE_INVALID_COMMAND;
-        }
+    return NGX_MAIL_PARSE_INVALID_COMMAND;
+}
     }
 
     s->buffer->pos = p;
@@ -228,25 +309,22 @@
 ngx_mail_imap_parse_command(ngx_mail_session_t *s)
 {
     u_char      ch, *p, *c, *dst, *src, *end;
+    ngx_int_t   rc;
     ngx_str_t  *arg;
-    enum {
-        sw_start = 0,
-        sw_tag,
-        sw_invalid,
-        sw_spaces_before_command,
-        sw_command,
-        sw_spaces_before_argument,
-        sw_argument,
-        sw_backslash,
-        sw_literal,
-        sw_no_sync_literal_argument,
-        sw_start_literal_argument,
-        sw_literal_argument,
-        sw_end_literal_argument,
-        sw_almost_done
-    } state;
+    p = NULL; /* for avoid warning */
+    ngx_imap_parse_state_e state = s->state;
 
-    state = s->state;
+    if(state >= swi_begin_idparams) { /* beyond the states handled in ID parse function */
+        rc = ngx_mail_imap_parse_id_params(s, s->buffer->pos);
+        switch (rc) {
+        case NGX_OK:
+             goto done;
+        case NGX_MAIL_PARSE_INVALID_COMMAND:
+             goto invalid;
+        default: /* NGX_ERROR, NGX_AGAIN or NGX_IMAP_NEXT */
+             return rc;
+        }
+    }
 
     for (p = s->buffer->pos; p < s->buffer->last; p++) {
         ch = *p;
@@ -254,18 +332,18 @@
         switch (state) {
 
         /* IMAP tag */
-        case sw_start:
+        case swi_start:
             s->tag_start = p;
-            state = sw_tag;
+            state = swi_tag;
 
             /* fall through */
 
-        case sw_tag:
+        case swi_tag:
             switch (ch) {
             case ' ':
-                s->tag.len = p - s->tag_start + 1;
+                s->tag.len = p - s->tag_start;
                 s->tag.data = s->tag_start;
-                state = sw_spaces_before_command;
+                state = swi_spaces_before_command;
                 break;
             case CR:
             case LF:
@@ -279,15 +357,15 @@
                 }
                 if (p - s->tag_start > 31) {
                     goto invalid;
-                }
-                break;
+            }
+            break;
             }
             break;
 
-        case sw_invalid:
+        case swi_invalid:
             goto invalid;
 
-        case sw_spaces_before_command:
+        case swi_spaces_before_command:
             switch (ch) {
             case ' ':
                 break;
@@ -296,18 +374,41 @@
                 goto invalid;
             default:
                 s->cmd_start = p;
-                state = sw_command;
+                state = swi_command;
                 break;
             }
             break;
 
-        case sw_command:
+        case swi_command:
             if (ch == ' ' || ch == CR || ch == LF) {
 
                 c = s->cmd_start;
 
                 switch (p - c) {
 
+                case 2:
+                    if ((c[0] == 'I' || c[0] == 'i')
+                        && (c[1] == 'D' || c[1] == 'd'))
+                    {
+                        s->command = NGX_IMAP_ID;
+                        /* RFC 2971 */
+                        ngx_int_t rc;
+                        s->state = swi_begin_idparams;
+                        p++; //move to the next character
+                        rc = ngx_mail_imap_parse_id_params(s, p);
+                        switch (rc) {
+                        case NGX_OK:
+                            goto done;
+                        case NGX_MAIL_PARSE_INVALID_COMMAND:
+                            goto invalid;
+                        default: /* NGX_ERROR or NGX_IMAP_NEXT */
+                            return rc;
+                        }
+                    } else {
+                        goto invalid;
+                    }
+                    break;
+
                 case 4:
                     if ((c[0] == 'N' || c[0] == 'n')
                         && (c[1] == 'O'|| c[1] == 'o')
@@ -315,7 +416,7 @@
                         && (c[3] == 'P'|| c[3] == 'p'))
                     {
                         s->command = NGX_IMAP_NOOP;
-
+                        s->eargs = 0;
                     } else {
                         goto invalid;
                     }
@@ -329,7 +430,7 @@
                         && (c[4] == 'N'|| c[4] == 'n'))
                     {
                         s->command = NGX_IMAP_LOGIN;
-
+                        s->eargs = 2;
                     } else {
                         goto invalid;
                     }
@@ -344,7 +445,7 @@
                         && (c[5] == 'T'|| c[5] == 't'))
                     {
                         s->command = NGX_IMAP_LOGOUT;
-
+                        s->eargs = 0;
                     } else {
                         goto invalid;
                     }
@@ -362,7 +463,7 @@
                         && (c[7] == 'S'|| c[7] == 's'))
                     {
                         s->command = NGX_IMAP_STARTTLS;
-
+                        s->eargs = 0;
                     } else {
                         goto invalid;
                     }
@@ -382,7 +483,7 @@
                         && (c[9] == 'Y'|| c[9] == 'y'))
                     {
                         s->command = NGX_IMAP_CAPABILITY;
-
+                        s->eargs = 0;
                     } else {
                         goto invalid;
                     }
@@ -402,7 +503,12 @@
                         && (c[10] == 'T'|| c[10] == 't')
                         && (c[11] == 'E'|| c[11] == 'e'))
                     {
-                        s->command = NGX_IMAP_AUTHENTICATE;
+                        if (ch != ' ') {
+                            goto invalid;
+                        } else {
+                            s->command = NGX_IMAP_AUTHENTICATE;
+                            s->eargs = 1;
+                        }
 
                     } else {
                         goto invalid;
@@ -418,10 +524,13 @@
 
                 switch (ch) {
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    if (s->command == NGX_IMAP_CAPABILITY) {
+                        goto invalid;
+                    }
+                    state = swi_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = swi_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -435,40 +544,46 @@
 
             break;
 
-        case sw_spaces_before_argument:
+        case swi_spaces_before_argument:
             switch (ch) {
             case ' ':
                 break;
             case CR:
-                state = sw_almost_done;
+                if (s->args.nelts == 0) {
+                    goto invalid; //no argument
+                }
+                state = swi_almost_done;
                 break;
             case LF:
+                if ( s->args.nelts == 0) {
+                    goto invalid; // no argument
+                }
                 goto done;
             case '"':
-                if (s->args.nelts <= 2) {
+                if (s->args.nelts <= s->eargs) {
                     s->quoted = 1;
                     s->arg_start = p + 1;
-                    state = sw_argument;
+                    state = swi_argument;
                     break;
                 }
                 goto invalid;
             case '{':
-                if (s->args.nelts <= 2) {
-                    state = sw_literal;
+                if (s->args.nelts <= s->eargs) {
+                    state = swi_literal;
                     break;
                 }
                 goto invalid;
             default:
-                if (s->args.nelts <= 2) {
+                if (s->args.nelts <= s->eargs) {
                     s->arg_start = p;
-                    state = sw_argument;
+                    state = swi_argument;
                     break;
                 }
                 goto invalid;
             }
             break;
 
-        case sw_argument:
+        case swi_argument:
             if (ch == ' ' && s->quoted) {
                 break;
             }
@@ -510,10 +625,10 @@
                 switch (ch) {
                 case '"':
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    state = swi_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = swi_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -522,46 +637,52 @@
             case '\\':
                 if (s->quoted) {
                     s->backslash = 1;
-                    state = sw_backslash;
+                    state = swi_backslash;
                 }
                 break;
             }
             break;
 
-        case sw_backslash:
+        case swi_backslash:
             switch (ch) {
             case CR:
             case LF:
                 goto invalid;
+            // (RFC3501)
+            // a backslash may only escape another backslash, or a double quote
+            case '\\':
+            case '"':
+                state = swi_argument;
+                break;
             default:
-                state = sw_argument;
+                goto invalid;
             }
             break;
 
-        case sw_literal:
+        case swi_literal:
             if (ch >= '0' && ch <= '9') {
                 s->literal_len = s->literal_len * 10 + (ch - '0');
                 break;
             }
             if (ch == '}') {
-                state = sw_start_literal_argument;
+                state = swi_start_literal_argument;
                 break;
             }
             if (ch == '+') {
-                state = sw_no_sync_literal_argument;
+                state = swi_no_sync_literal_argument;
                 break;
             }
             goto invalid;
 
-        case sw_no_sync_literal_argument:
+        case swi_no_sync_literal_argument:
             if (ch == '}') {
                 s->no_sync_literal = 1;
-                state = sw_start_literal_argument;
+                state = swi_start_literal_argument;
                 break;
             }
             goto invalid;
 
-        case sw_start_literal_argument:
+        case swi_start_literal_argument:
             switch (ch) {
             case CR:
                 break;
@@ -569,10 +690,10 @@
                 s->buffer->pos = p + 1;
                 s->arg_start = p + 1;
                 if (s->no_sync_literal == 0) {
-                    s->state = sw_literal_argument;
+                    s->state = swi_literal_argument;
                     return NGX_IMAP_NEXT;
                 }
-                state = sw_literal_argument;
+                state = swi_literal_argument;
                 s->no_sync_literal = 0;
                 break;
             default:
@@ -580,7 +701,7 @@
             }
             break;
 
-        case sw_literal_argument:
+        case swi_literal_argument:
             if (s->literal_len && --s->literal_len) {
                 break;
             }
@@ -592,36 +713,38 @@
             arg->len = p + 1 - s->arg_start;
             arg->data = s->arg_start;
             s->arg_start = NULL;
-            state = sw_end_literal_argument;
+            state = swi_end_literal_argument;
 
             break;
 
-        case sw_end_literal_argument:
+        case swi_end_literal_argument:
             switch (ch) {
             case '{':
-                if (s->args.nelts <= 2) {
-                    state = sw_literal;
+                if (s->args.nelts <= s->eargs) {
+                    state = swi_literal;
                     break;
                 }
                 goto invalid;
             case CR:
-                state = sw_almost_done;
+                state = swi_almost_done;
                 break;
             case LF:
                 goto done;
             default:
-                state = sw_spaces_before_argument;
+                state = swi_spaces_before_argument;
                 break;
             }
             break;
 
-        case sw_almost_done:
+        case swi_almost_done:
             switch (ch) {
             case LF:
                 goto done;
             default:
                 goto invalid;
             }
+        default:
+            break; /* for avoid warning only */
         }
     }
 
@@ -633,13 +756,11 @@
 done:
 
     s->buffer->pos = p + 1;
-    s->state = (s->command != NGX_IMAP_AUTHENTICATE) ? sw_start : sw_argument;
-
     return NGX_OK;
 
 invalid:
 
-    s->state = sw_invalid;
+    s->state = swi_invalid;
     s->quoted = 0;
     s->backslash = 0;
     s->no_sync_literal = 0;
@@ -649,7 +770,7 @@
 
     for ( /* void */ ; p < s->buffer->last; p++) {
         if (*p == LF) {
-            s->state = sw_start;
+            s->state = swi_start;
             s->buffer->pos = p + 1;
 
             /* detect non-synchronizing literals */
@@ -676,21 +797,500 @@
 }
 
 
+static ngx_int_t
+ngx_mail_imap_parse_id_params(ngx_mail_session_t *s, u_char *p)
+{
+    u_char ch;
+    ngx_imap_parse_state_e state;
+    ngx_str_t *arg;
+    state = s->state;
+
+    for (; p < s->buffer->last; p++) {
+        ch = *p;
+        switch(state) {
+        case swi_begin_idparams:
+            switch (ch) {
+                case '(':
+                    state = swi_begin_idfield;
+                    break;
+                case 'n':
+                case 'N':
+                    state = swi_id_n;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_begin_idparams: expected (/n/N, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_end_idparams:
+            switch (ch)
+            {
+                case ')':
+                    state = swi_done_idparams;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_end_idparams: expected ), got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+
+            break;
+
+        case swi_done_idparams:
+            switch (ch)
+            {
+                case CR:
+                    state = swi_almost_done;
+                    break;
+                case LF:
+                    return NGX_OK;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_done_idparams: expected CR/LF, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_id_n:
+            switch (ch) {
+                case 'i':
+                case 'I':
+                    state = swi_id_ni;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_id_n: expected i/I, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_id_ni:
+            switch (ch) {
+                case 'l':
+                case 'L':
+                    state = swi_id_nil;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_id_ni: expected l/L, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_id_nil:
+            switch (ch) {
+                case CR:
+                    state = swi_almost_done;
+                    break;
+                case LF:
+                    return NGX_OK;
+                default:
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_begin_idfield:
+            switch (ch) {
+                case '{':
+                    s->literal_len = 0;
+                    state = swi_idfield_len;
+                    break;
+                case '"':
+                    s->quoted = 1;
+                    s->backslash = 0;
+                    s->arg_start = p+1;
+                    state = swi_idfield;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_begin_idfield: expected \"/{, got '%c'", ch);
+                     return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idfield_len:
+            if (ch >= '0' && ch <= '9') {
+                s->literal_len = s->literal_len * 10 + (ch - '0');
+                break;
+            }
+            if (ch == '+') {
+                state = swi_idfield_len_plus;   /* literalplus stuff */
+                break;
+            }
+            if (ch == '}') {
+                s->no_sync_literal = 0;
+                state = swi_begin_idfield_l;
+                break;
+            }
+            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                "swi_idfield_len: expected 0-9/+/}, got '%c'", ch);
+            return NGX_MAIL_PARSE_INVALID_COMMAND;
+
+        case swi_idfield_len_plus:
+            if (ch == '}') {
+                s->no_sync_literal = 1;
+                state = swi_begin_idfield_l;
+                break;
+            }
+            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                "swi_idfield_len_plus: expected }, got '%c'", ch);
+            return NGX_MAIL_PARSE_INVALID_COMMAND;
+
+        case swi_begin_idfield_l:
+            switch (ch)
+            {
+                case CR:
+                    break;
+                case LF:
+                    if (s->literal_len) {
+                        s->buffer->pos = p + 1;
+                        s->arg_start = p + 1;
+                        state = swi_idfield_l;
+                    } else {
+                        s->buffer->pos = p + 1;
+                        s->arg_start = NULL;
+                        arg = ngx_array_push (&s->args);
+                        if (arg == NULL) { return NGX_ERROR; }
+                        arg->data = (u_char *)"";
+                        arg->len = 0;
+                        state = swi_SP_before_idvalue;
+                    }
+                    if (s->no_sync_literal == 1) {
+                        s->no_sync_literal = 0;
+                        break;
+                    } else {
+                        s->state = state;
+                        return NGX_IMAP_NEXT;
+                    }
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_begin_idfield_l: expected CR/LF, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idfield_l:
+            if (s->literal_len && --s->literal_len) {
+                break;
+            }
+
+            arg = ngx_array_push (&s->args);
+            if (arg == NULL) {
+                return NGX_ERROR;
+            }
+
+            arg->len = p + 1 - s->arg_start;
+            arg->data = s->arg_start;
+            s->arg_start = NULL;
+            state = swi_SP_before_idvalue;
+            break;
+
+        case swi_idfield:
+            switch (ch) {
+                case '\\':
+                    if (!s->backslash) {
+                        s->backslash = 1;
+                    } else {
+                        if (ch == '\\' && ch == '"')
+                            s->backslash = 0;
+                        else {
+                            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL,
+                              s->connection->log, 0,
+                              "swi_idfield: \\ escapes non-quoted special '%c'",
+                              ch);
+                            return NGX_MAIL_PARSE_INVALID_COMMAND;
+                        }
+                    }
+                    break;
+
+                case '"':
+                    if (s->backslash) {
+                        s->backslash = 0;
+                        break;
+                    }
+                    s->quoted = 0;
+                    arg = ngx_array_push(&s->args);
+                    if (arg == NULL) {
+                        return NGX_ERROR;
+                    }
+
+                    arg->len = p - s->arg_start;
+                    arg->data = s->arg_start;
+                    s->arg_start = NULL;
+                    state = swi_SP_before_idvalue;
+                    break;
+
+                case CR:
+                case LF:
+                    ngx_log_debug0 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_idfield: CR/LF breaks id field");
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+                default:
+                    break;
+            }
+            break;
+
+        case swi_begin_idvalue:
+            switch (ch)
+            {
+                case '"':
+                    s->quoted = 1;
+                    s->backslash = 0;
+                    s->arg_start = p+1;
+                    state = swi_idvalue;
+                    break;
+                case 'n':
+                case 'N':
+                    state = swi_idvalue_n;
+                    break;
+                case '{':
+                    s->literal_len = 0;
+                    state = swi_idvalue_len;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_begin_idvalue: expected \"/n/N/{, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idvalue_len:
+            if (ch >= '0' && ch <= '9') {
+                s->literal_len = s->literal_len + (ch - '0');
+                break;
+            }
+            if (ch == '+') {
+                state = swi_idvalue_len_plus;
+                break;
+            }
+            if (ch == '}') {
+                s->no_sync_literal = 0;
+                state = swi_begin_idvalue_l;
+                break;
+            }
+            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                "swi_idvalue_len: expected 0-9/}, got '%c'", ch);
+            return NGX_MAIL_PARSE_INVALID_COMMAND;
+
+        case swi_idvalue_len_plus:
+            if (ch == '}') {
+                s->no_sync_literal = 1;
+                state = swi_begin_idvalue_l;
+                break;
+            }
+            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                "swi_idvalue_len_plus: expected }, got '%c'", ch);
+            return NGX_MAIL_PARSE_INVALID_COMMAND;
+
+        case swi_begin_idvalue_l:
+            switch (ch)
+            {
+                case CR:
+                    break;
+                case LF:
+                    if (s->literal_len) {
+                        s->buffer->pos = p + 1;
+                        s->arg_start = p + 1;
+                        state = swi_idvalue_l;
+                    } else {
+                        s->buffer->pos = p + 1;
+                        s->arg_start = NULL;
+                        arg = ngx_array_push (&s->args);
+                        if (arg == NULL) { return NGX_ERROR; }
+                        arg->data = (u_char *)"";
+                        arg->len = 0;
+                        state = swi_X_before_idfield;
+                    }
+                    if (s->no_sync_literal == 1) {
+                        s->no_sync_literal = 0;
+                        break;
+                    } else {
+                        s->state = state;
+                        return NGX_IMAP_NEXT;
+                    }
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_begin_idvalue_l: expected CR/LF, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idvalue_l:
+            if (s->literal_len && --s->literal_len) {
+                break;
+            }
+
+            arg = ngx_array_push (&s->args);
+            if (arg == NULL) {
+                return NGX_ERROR;
+            }
+
+            arg->len = p + 1 - s->arg_start;
+            arg->data = s->arg_start;
+            s->arg_start = NULL;
+            state = swi_X_before_idfield;
+            break;
+
+        case swi_idvalue_n:
+            switch (ch)
+            {
+                case 'i':
+                case 'I':
+                    state = swi_idvalue_ni;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_idvalue_n: expected i/I, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idvalue_ni:
+            switch (ch)
+            {
+                case 'l':
+                case 'L':
+                    state = swi_idvalue_nil;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_idvalue_ni: expected l/L, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idvalue_nil:
+            switch (ch)
+            {
+                case ' ':
+                    state = swi_begin_idfield;
+                    arg = ngx_array_push (&s->args);
+                    if (arg == NULL) {
+                        return NGX_ERROR;
+                    }
+                    arg->data = (u_char *)"";
+                    arg->len = 0;
+                    break;
+                case ')':
+                    state = swi_done_idparams;
+                    arg = ngx_array_push (&s->args);
+                    if (arg == NULL) {
+                        return NGX_ERROR;
+                    }
+                    arg->data = (u_char *)"";
+                    arg->len = 0;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_idvalue_nil: expected SP/), got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_SP_before_idvalue:
+            switch (ch)
+            {
+                case ' ':
+                    state = swi_begin_idvalue;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_SP_before_idvalue: expected SP, got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_X_before_idfield:
+            switch (ch)
+            {
+                case ' ':
+                    state = swi_begin_idfield;
+                    break;
+                case ')':
+                    state = swi_done_idparams;
+                    break;
+                default:
+                    ngx_log_debug1 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_X_before_idfield: expected SP/), got '%c'", ch);
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+            break;
+
+        case swi_idvalue:
+            switch (ch)
+            {
+                case '\\':
+                    if (!s->backslash) {
+                        s->backslash = 1;
+                    } else {
+                        if (ch == '\\' || ch == '"')
+                            s->backslash = 0;
+                        else {
+                            ngx_log_debug1 (NGX_LOG_DEBUG_MAIL,
+                              s->connection->log, 0,
+                              "swi_idvalue: \\ escapes non-quoted special '%c'",
+                              ch);
+                            return NGX_MAIL_PARSE_INVALID_COMMAND;
+                        }
+                    }
+                    break;
+
+                case '"':
+                    if (s->backslash)
+                    {
+                        s->backslash = 0;
+                        break;
+                    }
+                    s->quoted = 0;
+                    arg = ngx_array_push (&s->args);
+                    if (arg == NULL) {
+                        return NGX_ERROR;
+                    }
+
+                    arg->len = p - s->arg_start;
+                    arg->data = s->arg_start;
+                    s->arg_start = NULL;
+                    state = swi_X_before_idfield;
+                    break;
+
+                case CR:
+                case LF:
+                    ngx_log_debug0 (NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
+                        "swi_idvalue: CR/LF breaks id value");
+                    return NGX_MAIL_PARSE_INVALID_COMMAND;
+                default:
+                    break;
+            }
+            break;
+        case swi_almost_done:
+            switch (ch) {
+            case LF:
+                return NGX_OK;
+            default:
+                return NGX_MAIL_PARSE_INVALID_COMMAND;
+            }
+
+        default:
+            break; /* for avoid warning only */
+        } /* switch (state) */
+    } /* for */
+
+    s->buffer->pos = p;
+    s->state = state;
+
+    return NGX_AGAIN;
+}
+
+
 ngx_int_t
 ngx_mail_smtp_parse_command(ngx_mail_session_t *s)
 {
     u_char      ch, *p, *c, c0, c1, c2, c3;
     ngx_str_t  *arg;
-    enum {
-        sw_start = 0,
-        sw_command,
-        sw_invalid,
-        sw_spaces_before_argument,
-        sw_argument,
-        sw_almost_done
-    } state;
 
-    state = s->state;
+    ngx_smtp_parse_state_e state = s->state;
 
     for (p = s->buffer->pos; p < s->buffer->last; p++) {
         ch = *p;
@@ -698,13 +1298,13 @@
         switch (state) {
 
         /* SMTP command */
-        case sw_start:
+        case sws_start:
             s->cmd_start = p;
-            state = sw_command;
+            state = sws_command;
 
             /* fall through */
 
-        case sw_command:
+        case sws_command:
             if (ch == ' ' || ch == CR || ch == LF) {
                 c = s->cmd_start;
 
@@ -789,10 +1389,10 @@
 
                 switch (ch) {
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    state = sws_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = sws_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -806,21 +1406,21 @@
 
             break;
 
-        case sw_invalid:
+        case sws_invalid:
             goto invalid;
 
-        case sw_spaces_before_argument:
+        case sws_spaces_before_argument:
             switch (ch) {
             case ' ':
                 break;
             case CR:
-                state = sw_almost_done;
+                state = sws_almost_done;
                 break;
             case LF:
                 goto done;
             default:
                 if (s->args.nelts <= 10) {
-                    state = sw_argument;
+                    state = sws_argument;
                     s->arg_start = p;
                     break;
                 }
@@ -828,7 +1428,7 @@
             }
             break;
 
-        case sw_argument:
+        case sws_argument:
             switch (ch) {
             case ' ':
             case CR:
@@ -843,10 +1443,10 @@
 
                 switch (ch) {
                 case ' ':
-                    state = sw_spaces_before_argument;
+                    state = sws_spaces_before_argument;
                     break;
                 case CR:
-                    state = sw_almost_done;
+                    state = sws_almost_done;
                     break;
                 case LF:
                     goto done;
@@ -858,7 +1458,7 @@
             }
             break;
 
-        case sw_almost_done:
+        case sws_almost_done:
             switch (ch) {
             case LF:
                 goto done;
@@ -876,19 +1476,19 @@
 done:
 
     s->buffer->pos = p + 1;
-    s->state = (s->command != NGX_SMTP_AUTH) ? sw_start : sw_argument;
+
 
     return NGX_OK;
 
 invalid:
 
-    s->state = sw_invalid;
+    s->state = sws_invalid;
 
     /* skip invalid command till LF */
 
     for ( /* void */ ; p < s->buffer->last; p++) {
         if (*p == LF) {
-            s->state = sw_start;
+            s->state = sws_start;
             s->buffer->pos = p + 1;
             return NGX_MAIL_PARSE_INVALID_COMMAND;
         }
@@ -905,12 +1505,6 @@
 {
     ngx_str_t                 *arg;
 
-#if (NGX_MAIL_SSL)
-    if (ngx_mail_starttls_only(s, c)) {
-        return NGX_MAIL_PARSE_INVALID_COMMAND;
-    }
-#endif
-
     if (s->args.nelts == 0) {
         return NGX_MAIL_PARSE_INVALID_COMMAND;
     }
@@ -925,7 +1519,7 @@
                 return NGX_MAIL_AUTH_LOGIN;
             }
 
-            if (s->args.nelts == 2) {
+            if (s->args.nelts == 2) { //initial response
                 return NGX_MAIL_AUTH_LOGIN_USERNAME;
             }
 
@@ -938,14 +1532,28 @@
                 return NGX_MAIL_AUTH_PLAIN;
             }
 
-            if (s->args.nelts == 2) {
-                return ngx_mail_auth_plain(s, c, 1);
+            if (s->args.nelts == 2) { //initial response
+                return NGX_MAIL_AUTH_PLAIN_IR;
             }
         }
 
         return NGX_MAIL_PARSE_INVALID_COMMAND;
     }
 
+    if (arg[0].len == 6) {
+        if (ngx_strncasecmp(arg[0].data, (u_char *) "GSSAPI", 6) == 0 ) {
+            if (s->args.nelts == 1) {
+                return NGX_MAIL_AUTH_GSSAPI;
+            }
+
+            if (s->args.nelts == 2) { //initial response
+                return NGX_MAIL_AUTH_GSSAPI_IR;
+            }
+        } 
+       
+        return NGX_MAIL_PARSE_INVALID_COMMAND;
+    }
+
     if (arg[0].len == 8) {
 
         if (ngx_strncasecmp(arg[0].data, (u_char *) "CRAM-MD5", 8) == 0) {
@@ -971,5 +1579,5 @@
         return NGX_MAIL_PARSE_INVALID_COMMAND;
     }
 
-    return NGX_MAIL_PARSE_INVALID_COMMAND;
+    return NGX_MAIL_PARSE_INVALID_AUTH_MECH;
 }
