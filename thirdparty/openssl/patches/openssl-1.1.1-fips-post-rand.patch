diff -ruN a/crypto/fips/fips.c b/crypto/fips/fips.c
--- a/crypto/fips/fips.c	2022-04-19 06:41:41.439286918 +0000
+++ b/crypto/fips/fips.c	2022-04-19 06:49:20.870146540 +0000
@@ -68,6 +68,7 @@
 
 # include <openssl/fips.h>
 # include "internal/thread_once.h"
+# include "crypto/rand.h"
 
 # ifndef PATH_MAX
 #  define PATH_MAX 1024
@@ -76,6 +77,7 @@
 static int fips_selftest_fail = 0;
 static int fips_mode = 0;
 static int fips_started = 0;
+static int fips_post = 0;
 
 static int fips_is_owning_thread(void);
 static int fips_set_owning_thread(void);
@@ -158,6 +160,11 @@
     fips_selftest_fail = 1;
 }
 
+int fips_in_post(void)
+{
+    return fips_post;
+}
+
 /* we implement what libfipscheck does ourselves */
 
 static int
@@ -444,6 +451,7 @@
             }
         }
 # endif
+        fips_post = 1;
 
         if (!FIPS_selftest()) {
             fips_selftest_fail = 1;
@@ -458,8 +466,11 @@
             ret = 0;
             goto end;
         }
-
+         
+        fips_post = 0;
         fips_set_mode(onoff);
+        /* force RNG reseed with entropy from getrandom() on next call */
+        rand_force_reseed();
         ret = 1;
         goto end;
     }
diff -ruN a/crypto/rand/drbg_lib.c b/crypto/rand/drbg_lib.c
--- a/crypto/rand/drbg_lib.c	2022-04-19 06:49:51.642879210 +0000
+++ b/crypto/rand/drbg_lib.c	2022-04-19 06:51:39.661451646 +0000
@@ -1005,6 +1005,20 @@
     return min_entropy > min_entropylen ? min_entropy : min_entropylen;
 }
 
+void rand_force_reseed(void)
+{
+    RAND_DRBG *drbg;
+
+    drbg = RAND_DRBG_get0_master();
+    drbg->fork_id = 0;
+
+    drbg = RAND_DRBG_get0_private();
+    drbg->fork_id = 0;
+
+    drbg = RAND_DRBG_get0_public();
+    drbg->fork_id = 0;
+}
+
 /* Implements the default OpenSSL RAND_add() method */
 static int drbg_add(const void *buf, int num, double randomness)
 {
diff -ruN a/crypto/rand/rand_unix.c b/crypto/rand/rand_unix.c
--- a/crypto/rand/rand_unix.c	2022-04-19 06:52:35.962791633 +0000
+++ b/crypto/rand/rand_unix.c	2022-04-19 07:01:17.739208906 +0000
@@ -14,6 +14,7 @@
 #include <stdio.h>
 #include "internal/cryptlib.h"
 #include <openssl/rand.h>
+#include "crypto/fips.h"
 #include <openssl/crypto.h>
 #include "rand_local.h"
 #include "crypto/rand.h"
@@ -21,6 +22,7 @@
 #include "internal/dso.h"
 #ifdef __linux
 # include <sys/syscall.h>
+# include <sys/random.h>
 # ifdef DEVRANDOM_WAIT
 #  include <sys/shm.h>
 #  include <sys/utsname.h>
@@ -344,7 +346,7 @@
  * syscall_random(): Try to get random data using a system call
  * returns the number of bytes returned in buf, or < 0 on error.
  */
-static ssize_t syscall_random(void *buf, size_t buflen)
+static ssize_t syscall_random(void *buf, size_t buflen, int nonblock)
 {
     /*
      * Note: 'buflen' equals the size of the buffer which is used by the
@@ -369,6 +371,7 @@
      * Note: Sometimes getentropy() can be provided but not implemented
      * internally. So we need to check errno for ENOSYS
      */
+#  if 0
 #  if defined(__GNUC__) && __GNUC__>=2 && defined(__ELF__) && !defined(__hpux)
     extern int getentropy(void *buffer, size_t length) __attribute__((weak));
 
@@ -399,10 +402,11 @@
     if (p_getentropy.p != NULL)
         return p_getentropy.f(buf, buflen) == 0 ? (ssize_t)buflen : -1;
 #  endif
+#  endif
 
     /* Linux supports this since version 3.17 */
-#  if defined(__linux) && defined(__NR_getrandom)
-    return syscall(__NR_getrandom, buf, buflen, 0);
+#if defined(__linux) && defined(SYS_getrandom)
+    return syscall(SYS_getrandom, buf, buflen, nonblock?GRND_NONBLOCK:0);
 #  elif (defined(__FreeBSD__) || defined(__NetBSD__)) && defined(KERN_ARND)
     return sysctl_random(buf, buflen);
 #  else
@@ -638,6 +642,8 @@
     size_t entropy_available;
 
 #   if defined(OPENSSL_RAND_SEED_GETRANDOM)
+    int in_post;
+    for (in_post = fips_in_post(); in_post >= 0; --in_post) {
     {
         size_t bytes_needed;
         unsigned char *buffer;
@@ -648,7 +654,7 @@
         bytes_needed = rand_pool_bytes_needed(pool, 1 /*entropy_factor*/);
         while (bytes_needed != 0 && attempts-- > 0) {
             buffer = rand_pool_add_begin(pool, bytes_needed);
-            bytes = syscall_random(buffer, bytes_needed);
+            bytes = syscall_random(buffer, bytes_needed, in_post);
             if (bytes > 0) {
                 rand_pool_add_end(pool, bytes, 8 * bytes);
                 bytes_needed -= bytes;
@@ -683,8 +689,10 @@
             int attempts = 3;
             const int fd = get_random_device(i);
 
-            if (fd == -1)
+            if (fd == -1) {
+                OPENSSL_showfatal("Random device %s cannot be opened.\n", random_device_paths[i]);
                 continue;
+            }
 
             while (bytes_needed != 0 && attempts-- > 0) {
                 buffer = rand_pool_add_begin(pool, bytes_needed);
@@ -747,7 +755,9 @@
             return entropy_available;
     }
 #   endif
-
+    #   ifdef OPENSSL_RAND_SEED_GETRANDOM
+        }
+    #    endif
     return rand_pool_entropy_available(pool);
 #  endif
 }
diff -ruN a/include/crypto/fips.h b/include/crypto/fips.h
--- a/include/crypto/fips.h	2022-04-19 07:02:07.032380851 +0000
+++ b/include/crypto/fips.h	2022-04-19 07:02:47.569346433 +0000
@@ -76,6 +76,7 @@
 int FIPS_selftest_hmac(void);
 int FIPS_selftest_drbg(void);
 int FIPS_selftest_cmac(void);
+int fips_in_post(void);
 
 int fips_pkey_signature_test(EVP_PKEY *pkey,
                                  const unsigned char *tbs, int tbslen,
diff -ruN a/include/crypto/rand.h b/include/crypto/rand.h
--- a/include/crypto/rand.h	2022-04-19 07:03:41.970639388 +0000
+++ b/include/crypto/rand.h	2022-04-19 07:04:16.479459544 +0000
@@ -34,6 +34,7 @@
 typedef struct rand_pool_st RAND_POOL;
 
 void rand_cleanup_int(void);
+void rand_force_reseed(void);
 void rand_drbg_cleanup_int(void);
 void drbg_delete_thread_state(void);
 
