diff --git a/apps/s_apps.h b/apps/s_apps.h
index cbb61ba..c8f74c5 100644
--- a/apps/s_apps.h
+++ b/apps/s_apps.h
@@ -153,7 +153,7 @@ typedef fd_mask fd_set;
 
 int do_server(int port, int type, int *ret,
               int (*cb) (int s, int stype, unsigned char *context),
-              unsigned char *context, int naccept);
+              unsigned char *context, int naccept, int family);
 #ifdef HEADER_X509_H
 int MS_CALLBACK verify_callback(int ok, X509_STORE_CTX *ctx);
 #endif
@@ -166,7 +166,7 @@ int ssl_print_point_formats(BIO *out, SSL *s);
 int ssl_print_curves(BIO *out, SSL *s, int noshared);
 #endif
 int ssl_print_tmp_key(BIO *out, SSL *s);
-int init_client(int *sock, char *server, int port, int type);
+int init_client(int *sock, const char *server, int port, int type, int af);
 int should_retry(int i);
 int extract_port(char *str, short *port_ptr);
 int extract_host_port(char *str, char **host_ptr, unsigned char *ip,
@@ -188,6 +188,8 @@ int MS_CALLBACK generate_cookie_callback(SSL *ssl, unsigned char *cookie,
 int MS_CALLBACK verify_cookie_callback(SSL *ssl, unsigned char *cookie,
                                        unsigned int cookie_len);
 
+unsigned char *next_protos_parse(unsigned short *outlen, const char *in);
+
 typedef struct ssl_excert_st SSL_EXCERT;
 
 void ssl_ctx_set_excert(SSL_CTX *ctx, SSL_EXCERT *exc);
diff --git a/apps/s_client.c b/apps/s_client.c
index b455d90..7fb38bb 100644
--- a/apps/s_client.c
+++ b/apps/s_client.c
@@ -299,7 +299,9 @@ static void sc_usage(void)
 {
     BIO_printf(bio_err, "usage: s_client args\n");
     BIO_printf(bio_err, "\n");
-    BIO_printf(bio_err, " -host host     - use -connect instead\n");
+    BIO_printf(bio_err, " -4             - use IPv4 address for host\n");
+    BIO_printf(bio_err, " -6             - use IPv6 address for host\n");
+	BIO_printf(bio_err, " -host host     - use -connect instead\n");
     BIO_printf(bio_err, " -port port     - use -connect instead\n");
     BIO_printf(bio_err,
                " -connect host:port - who to connect to (default is %s:%s)\n",
@@ -669,6 +671,7 @@ int MAIN(int argc, char **argv)
     int sbuf_len, sbuf_off;
     fd_set readfds, writefds;
     short port = PORT;
+    int family = AF_UNSPEC;
     int full_log = 1;
     char *host = SSL_HOST_NAME;
     char *cert_file = NULL, *key_file = NULL, *chain_file = NULL;
@@ -795,7 +798,11 @@ int MAIN(int argc, char **argv)
             port = atoi(*(++argv));
             if (port == 0)
                 goto bad;
-        } else if (strcmp(*argv, "-connect") == 0) {
+        } else if (strcmp(*argv,"-6") == 0) {
+            family = AF_INET6;
+		} else if (strcmp(*argv,"-4") == 0) {
+			family = AF_INET;
+		} else if (strcmp(*argv, "-connect") == 0) {
             if (--argc < 1)
                 goto bad;
             if (!extract_host_port(*(++argv), &host, NULL, &port))
@@ -1174,6 +1181,8 @@ int MAIN(int argc, char **argv)
     OpenSSL_add_ssl_algorithms();
     SSL_load_error_strings();
 
+		if (next_proto.data)
+			SSL_CTX_set_next_proto_select_cb(ctx, next_proto_cb, &next_proto);
 #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
     next_proto.status = -1;
     if (next_proto_neg_in) {
@@ -1449,7 +1458,7 @@ int MAIN(int argc, char **argv)
 
  re_start:
 
-    if (init_client(&s, host, port, socket_type) == 0) {
+    if (init_client(&s, host, port, socket_type, family) == 0) {
         BIO_printf(bio_err, "connect:errno=%d\n", get_last_socket_error());
         SHUTDOWN(s);
         goto end;
diff --git a/apps/s_server.c b/apps/s_server.c
index ce7a1d6..e97909c 100644
--- a/apps/s_server.c
+++ b/apps/s_server.c
@@ -1083,6 +1083,7 @@ int MAIN(int argc, char *argv[])
     X509_VERIFY_PARAM *vpm = NULL;
     int badarg = 0;
     short port = PORT;
+    int family = AF_UNSPEC;
     char *CApath = NULL, *CAfile = NULL;
     char *chCApath = NULL, *chCAfile = NULL;
     char *vfyCApath = NULL, *vfyCAfile = NULL;
@@ -1183,7 +1184,11 @@ int MAIN(int argc, char *argv[])
                 BIO_printf(bio_err, "bad accept value %s\n", *argv);
                 goto bad;
             }
-        } else if (strcmp(*argv, "-verify") == 0) {
+        } else if (strcmp(*argv,"-4") == 0) {
+            family = AF_INET;
+        } else if (strcmp(*argv,"-6") == 0) {
+            family = AF_INET6;
+		} else if (strcmp(*argv, "-verify") == 0) {
             s_server_verify = SSL_VERIFY_PEER | SSL_VERIFY_CLIENT_ONCE;
             if (--argc < 1)
                 goto bad;
@@ -2070,13 +2075,13 @@ int MAIN(int argc, char *argv[])
     (void)BIO_flush(bio_s_out);
     if (rev)
         do_server(port, socket_type, &accept_socket, rev_body, context,
-                  naccept);
+                  naccept, family);
     else if (www)
         do_server(port, socket_type, &accept_socket, www_body, context,
-                  naccept);
+                  naccept, family);
     else
         do_server(port, socket_type, &accept_socket, sv_body, context,
-                  naccept);
+                  naccept, family);
     print_stats(bio_s_out, ctx);
     ret = 0;
  end:
diff --git a/apps/s_socket.c b/apps/s_socket.c
index b3848dd..24b0779 100644
--- a/apps/s_socket.c
+++ b/apps/s_socket.c
@@ -106,9 +106,9 @@ static struct hostent *GetHostByName(char *name);
 static void ssl_sock_cleanup(void);
 # endif
 static int ssl_sock_init(void);
-static int init_client_ip(int *sock, unsigned char ip[4], int port, int type);
-static int init_server(int *sock, int port, int type);
-static int init_server_long(int *sock, int port, char *ip, int type);
+static int init_server(int *sock, int port, int type, int family);
+static int init_server_long(int *sock, int port, char *ip, int type, int af);
+static int init_client_ip(int *sock, const char *host, int port, int type, int af);
 static int do_accept(int acc_sock, int *sock);
 static int host_ip(char *str, unsigned char ip[4]);
 
@@ -231,73 +231,79 @@ static int ssl_sock_init(void)
     return (1);
 }
 
-int init_client(int *sock, char *host, int port, int type)
+int init_client(int *sock, const char *host, int port, int type, int af)
 {
-    unsigned char ip[4];
-
-    memset(ip, '\0', sizeof(ip));
-    if (!host_ip(host, &(ip[0])))
-        return 0;
-    return init_client_ip(sock, ip, port, type);
+    /* Only a wrapper functionality remains. */
+    return init_client_ip(sock, host, port, type, af);
 }
 
-static int init_client_ip(int *sock, unsigned char ip[4], int port, int type)
+static int init_client_ip(int *sock, const char *host, int port, int type, int af)
 {
-    unsigned long addr;
-    struct sockaddr_in them;
-    int s, i;
-
+	struct sockaddr_storage them;
+    struct addrinfo hints, *ai, *aiptr;
+    char portstr[12];
+    int s, ret;
     if (!ssl_sock_init())
         return (0);
 
-    memset((char *)&them, 0, sizeof(them));
-    them.sin_family = AF_INET;
-    them.sin_port = htons((unsigned short)port);
-    addr = (unsigned long)
-        ((unsigned long)ip[0] << 24L) |
-        ((unsigned long)ip[1] << 16L) |
-        ((unsigned long)ip[2] << 8L) | ((unsigned long)ip[3]);
-    them.sin_addr.s_addr = htonl(addr);
-
-    if (type == SOCK_STREAM)
-        s = socket(AF_INET, SOCK_STREAM, SOCKET_PROTOCOL);
-    else                        /* ( type == SOCK_DGRAM) */
-        s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
-
-    if (s == INVALID_SOCKET) {
-        perror("socket");
-        return (0);
-    }
-# if defined(SO_KEEPALIVE) && !defined(OPENSSL_SYS_MPE)
-    if (type == SOCK_STREAM) {
-        i = 0;
-        i = setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (char *)&i, sizeof(i));
-        if (i < 0) {
-            closesocket(s);
-            perror("keepalive");
-            return (0);
-        }
-    }
-# endif
+    snprintf(portstr, sizeof(portstr), "%u", port);
 
-    if (connect(s, (struct sockaddr *)&them, sizeof(them)) == -1) {
-        closesocket(s);
-        perror("connect");
-        return (0);
+    memset(&them, 0, sizeof(them));
+	memset(&hints, 0, sizeof(hints));
+    hints.ai_family = af;
+    hints.ai_socktype = type;
+    hints.ai_flags = AI_ADDRCONFIG;
+
+    if ((ret = getaddrinfo(host, portstr, &hints, &aiptr))) {
+        /* Lookup failed. */
+        fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(ret));
+        return(0);
     }
-    *sock = s;
-    return (1);
+	    for (ai = aiptr; ai != NULL; ai = ai->ai_next) {
+	      if ((s = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) < 0) {
+	            perror("socket");
+	            continue;
+	      }
+	
+	#if defined(SO_KEEPALIVE) && !defined(OPENSSL_SYS_MPE)
+	        if (type == SOCK_STREAM) {
+		    int i = 0;
+		    i = setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (char *)&i, sizeof(i));
+	            if (i < 0) {
+	                perror("keepalive");
+	                close(s);
+	                continue;
+	            }
+	        }
+	#endif
+		if (connect(s, ai->ai_addr, ai->ai_addrlen) < 0) {
+	            perror("connect");
+	            close(s);
+	            continue;
+	    }
+        /* Connection has been established. */
+	    break;
+	 }
+   freeaddrinfo(aiptr);
+   
+       if (ai) {
+           /* Success. */
+           *sock = s;
+           return (1);
+        }
+		*sock = s;
+		return (0);
 }
 
 int do_server(int port, int type, int *ret,
               int (*cb) (int s, int stype, unsigned char *context),
-              unsigned char *context, int naccept)
+              unsigned char *context, int naccept, int family)
 {
     int sock;
     int accept_socket = 0;
     int i;
 
-    if (!init_server(&accept_socket, port, type))
+    if (!init_server(&accept_socket, port, type, family))
         return (0);
 
     if (ret != NULL) {
@@ -324,52 +330,60 @@ int do_server(int port, int type, int *ret,
     }
 }
 
-static int init_server_long(int *sock, int port, char *ip, int type)
+static int init_server_long(int *sock, int port, char *ip, int type, int af)
 {
-    int ret = 0;
-    struct sockaddr_in server;
     int s = -1;
-
+    int ret = 0, rc;
+    char portstr[12];
+    struct addrinfo hints, *ai, *aiptr;
     if (!ssl_sock_init())
         return (0);
 
-    memset((char *)&server, 0, sizeof(server));
-    server.sin_family = AF_INET;
-    server.sin_port = htons((unsigned short)port);
-    if (ip == NULL)
-        server.sin_addr.s_addr = INADDR_ANY;
-    else
-/* Added for T3E, address-of fails on bit field (beckman@acl.lanl.gov) */
-# ifndef BIT_FIELD_LIMITS
-        memcpy(&server.sin_addr.s_addr, ip, 4);
-# else
-        memcpy(&server.sin_addr, ip, 4);
-# endif
-
-    if (type == SOCK_STREAM)
-        s = socket(AF_INET, SOCK_STREAM, SOCKET_PROTOCOL);
-    else                        /* type == SOCK_DGRAM */
-        s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+    snprintf(portstr, sizeof(portstr), "%u", port);
+    memset(&hints, 0, sizeof(hints));
+    hints.ai_family = af;
+    hints.ai_socktype = type;
+    hints.ai_flags = AI_PASSIVE | AI_NUMERICSERV | AI_ADDRCONFIG;
 
-    if (s == INVALID_SOCKET)
-        goto err;
-# if defined SOL_SOCKET && defined SO_REUSEADDR
-    {
-        int j = 1;
-        setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (void *)&j, sizeof(j));
-    }
-# endif
-    if (bind(s, (struct sockaddr *)&server, sizeof(server)) == -1) {
-# ifndef OPENSSL_SYS_WINDOWS
-        perror("bind");
-# endif
+    if ((rc = getaddrinfo(NULL, portstr, &hints, &aiptr))) {
+        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rc));
         goto err;
+    } else {
+        for (ai = aiptr; ai; ai = ai->ai_next) {
+            if ((s = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) < 0) {
+				perror("bind");
+                continue;
+            }
+#if defined SOL_SOCKET && defined SO_REUSEADDR
+            {
+                int j = 1;
+                setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char*)&j, sizeof(j));
+            }
+#endif
+            if (bind(s, ai->ai_addr, ai->ai_addrlen) < 0) {
+                perror("bind");
+                close(s);
+                s = -1;
+                continue;
+            }
+            /* Make it 128 for linux */
+            if (type == SOCK_STREAM && listen(s, 128) == -1) {
+                perror("listen");
+                close(s);
+                s = -1;
+                continue;
+            }
+            /* Successfully listening. */
+            break;
+        }
+
+        freeaddrinfo(aiptr);
+        if (ai) {
+            /* Success. */
+            *sock = s;
+            ret = 1;
+        }
     }
-    /* Make it 128 for linux */
-    if (type == SOCK_STREAM && listen(s, 128) == -1)
-        goto err;
-    *sock = s;
-    ret = 1;
  err:
     if ((ret == 0) && (s != -1)) {
         SHUTDOWN(s);
@@ -377,21 +391,19 @@ static int init_server_long(int *sock, int port, char *ip, int type)
     return (ret);
 }
 
-static int init_server(int *sock, int port, int type)
+static int init_server(int *sock, int port, int type, int family)
 {
-    return (init_server_long(sock, port, NULL, type));
+    return (init_server_long(sock, port, NULL, type, family));
 }
 
 static int do_accept(int acc_sock, int *sock)
 {
     int ret;
-
     if (!ssl_sock_init())
         return 0;
-
-# ifndef OPENSSL_SYS_WINDOWS
- redoit:
-# endif
+    # ifndef OPENSSL_SYS_WINDOWS
+      redoit:
+    # endif
 
     /*
      * Note: under VMS with SOCKETSHR the fourth parameter is currently of
@@ -399,7 +411,7 @@ static int do_accept(int acc_sock, int *sock)
      * have a cast it will choke the compiler: if you do have a cast then you
      * can either go for (int *) or (void *).
      */
-    ret = accept(acc_sock, NULL, NULL);
+    ret	 = accept(acc_sock, NULL, NULL);
     if (ret == INVALID_SOCKET) {
 # if defined(OPENSSL_SYS_WINDOWS) || (defined(OPENSSL_SYS_NETWARE) && !defined(NETWARE_BSDSOCK))
         int i;
@@ -428,7 +440,7 @@ int extract_host_port(char *str, char **host_ptr, unsigned char *ip,
     char *h, *p;
 
     h = str;
-    p = strchr(str, ':');
+    p = strrchr(str, ':');
     if (p == NULL) {
         BIO_printf(bio_err, "no port defined\n");
         return (0);
@@ -467,18 +479,18 @@ static int host_ip(char *str, unsigned char ip[4])
         struct hostent *he;
 
         if (!ssl_sock_init())
-            return (0);
+            goto err;
 
         he = GetHostByName(str);
         if (he == NULL) {
             BIO_printf(bio_err, "gethostbyname failure\n");
             goto err;
         }
+	    if ((short)he->h_addrtype != AF_INET) {
+			BIO_printf(bio_err, "gethostbyname addr is not AF_INET\n");
+			goto err;
+         }
         /* cast to short because of win16 winsock definition */
-        if ((short)he->h_addrtype != AF_INET) {
-            BIO_printf(bio_err, "gethostbyname addr is not AF_INET\n");
-            return (0);
-        }
         ip[0] = he->h_addr_list[0][0];
         ip[1] = he->h_addr_list[0][1];
         ip[2] = he->h_addr_list[0][2];
diff --git a/doc/apps/s_client.pod b/doc/apps/s_client.pod
index 77cc071..5bca878 100644
--- a/doc/apps/s_client.pod
+++ b/doc/apps/s_client.pod
@@ -9,6 +9,8 @@ s_client - SSL/TLS client program
 =head1 SYNOPSIS
 
 B<openssl> B<s_client>
+[B<-4>]
+[B<-6>]
 [B<-connect host:port>]
 [B<-servername name>]
 [B<-verify depth>]
@@ -69,6 +71,14 @@ SSL servers.
 
 =over 4
 
+=item B<-4>
+
+Use only IPv4 addresses when resolving the host name.
+
+=item B<-6>
+
+Use only IPv6 addresses when resolving the host name.
+
 =item B<-connect host:port>
 
 This specifies the host and optional port to connect to. If not specified
diff --git a/doc/apps/s_server.pod b/doc/apps/s_server.pod
index 84777ee..2db30e3 100644
--- a/doc/apps/s_server.pod
+++ b/doc/apps/s_server.pod
@@ -9,6 +9,8 @@ s_server - SSL/TLS server program
 =head1 SYNOPSIS
 
 B<openssl> B<s_server>
+[B<-4>]
+[B<-6>]
 [B<-accept port>]
 [B<-context id>]
 [B<-verify depth>]
@@ -78,6 +80,14 @@ for connections on a given port using SSL/TLS.
 
 =over 4
 
+=item B<-4>
+
+let the server listen using IPv4.
+
+=item B<-6>
+
+let the server listen using IPv6.
+
 =item B<-accept port>
 
 the TCP port to listen on for connections. If not specified 4433 is used.
diff --git a/e_os.h b/e_os.h
index 1fa36c1..1a210f7 100644
--- a/e_os.h
+++ b/e_os.h
@@ -515,6 +515,9 @@ typedef unsigned long clock_t;
 #    define SHUTDOWN(fd)              close(fd)
 #    define SHUTDOWN2(fd)             close(fd)
 #   elif !defined(__DJGPP__)
+#    include <winsock2.h>
+#    include <WS2tcpip.h>
+#    include <WSPiApi.h>
 #    if defined(_WIN32_WCE) && _WIN32_WCE<410
 #     define getservbyname _masked_declaration_getservbyname
 #    endif
