diff -ruN a/saslauthd/testsaslauthd.c b/saslauthd/testsaslauthd.c
--- a/saslauthd/testsaslauthd.c	2022-06-07 07:04:12.199434292 +0000
+++ b/saslauthd/testsaslauthd.c	2022-06-07 07:46:25.343370444 +0000
@@ -97,7 +97,8 @@
 				   const char *userid, 
 				   const char *passwd,
 				   const char *service,
-				   const char *user_realm)
+                                   const char *user_realm,
+                                   const char *cipport)
 {
     char response[1024];
     char query[8192];
@@ -107,6 +108,10 @@
     int r;
     unsigned short count;
     char pwpath[sizeof(srvaddr.sun_path)];
+    const char *p = NULL;
+    #define CLIENTIPPORT_LEN 128
+    char clientipport[CLIENTIPPORT_LEN+1];
+    char *colon;
 #ifdef USE_DOORS
     door_arg_t arg;
 #endif
@@ -114,6 +119,20 @@
     if(!service) service = "imap";
     if(!user_realm) user_realm = "";
     if(!userid || !passwd) return -1;
+    if(cipport) {
+	if (strlen(cipport) > CLIENTIPPORT_LEN) {
+            fprintf(stderr, "'clientip:clientport' must not exceed %d characters\n", CLIENTIPPORT_LEN);
+	    return -1;
+ 	}
+	strcpy(clientipport, cipport);
+	colon = strchr(clientipport, ':');
+	if (colon)
+	    *colon = ';';
+	else {
+            fprintf(stderr, "missing colon in 'clientip:clientport'\n");
+	    return -1;
+	}
+    }
     
     if (saslauthd_path) {
 	strlcpy(pwpath, saslauthd_path, sizeof(pwpath));
@@ -131,12 +150,13 @@
      * count authid count password count service count realm
      */
     {
- 	unsigned short u_len, p_len, s_len, r_len;
+        unsigned short u_len, p_len, s_len, r_len, c_len;
  
  	u_len = htons(strlen(userid));
  	p_len = htons(strlen(passwd));
 	s_len = htons(strlen(service));
 	r_len = htons((user_realm ? strlen(user_realm) : 0));
+        c_len = cipport ? htons(strlen(clientipport)) : 0;
 
 	memcpy(query_end, &u_len, sizeof(unsigned short));
 	query_end += sizeof(unsigned short);
@@ -153,6 +173,12 @@
 	memcpy(query_end, &r_len, sizeof(unsigned short));
 	query_end += sizeof(unsigned short);
 	if (user_realm) while (*user_realm) *query_end++ = *user_realm++;
+        if (c_len) {
+	    memcpy(query_end, &c_len, sizeof(unsigned short));
+	    query_end += sizeof(unsigned short);
+	    p = clientipport;
+	    while (*p) *query_end++ = *p++;
+        }
     }
 
 #ifdef USE_DOORS
@@ -252,12 +278,13 @@
 {
   const char *user = NULL, *password = NULL;
   const char *realm = NULL, *service = NULL, *path = NULL;
+  const char *clientipport = NULL;
   int c;
   int flag_error = 0;
   int result = 0;
   int repeat = 0;
 
-  while ((c = getopt(argc, argv, "p:u:r:s:f:R:")) != EOF)
+  while ((c = getopt(argc, argv, "p:u:r:s:f:c:R:")) != EOF)
       switch (c) {
       case 'R':
 	  repeat = atoi(optarg);
@@ -277,6 +304,9 @@
       case 'p':
 	  password = optarg;
 	  break;
+      case 'c':
+          clientipport = optarg;
+          break;
       default:
 	  flag_error = 1;
 	  break;
@@ -289,7 +319,8 @@
     (void)fprintf(stderr,
 		  "%s: usage: %s -u username -p password\n"
 		  "              [-r realm] [-s servicename]\n"
-		  "              [-f socket path] [-R repeatnum]\n",
+                  "              [-f socket path] [-R repeatnum]\n"
+                  "              [-c clientip:clientport]\n",
 		  argv[0], argv[0]);
     exit(1);
   }
@@ -298,7 +329,7 @@
   for (c = 0; c < repeat; c++) {
       /* saslauthd-authenticated login */
       printf("%d: ", c);
-      result = saslauthd_verify_password(path, user, password, service, realm);
+      result = saslauthd_verify_password(path, user, password, service, realm, clientipport);
   }
   return result;
 }
